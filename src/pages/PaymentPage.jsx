import React, { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import { useParams, useNavigate, useLocation } from 'react-router-dom';
import { 
  FiArrowLeft, 
  FiCreditCard, 
  FiCheck, 
  FiClock,
  FiAlertCircle,
  FiCopy,
  FiExternalLink,
  FiDollarSign,
  FiInfo,
  FiLock,
  FiShield,
  FiX
} from 'react-icons/fi';
import { createClient } from '@supabase/supabase-js';

import Section from '../components/ui/Section';
import Button from '../components/ui/Button';
import { showNotification, showConfirmation } from '../utils/telegramUtils';

// –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ Supabase
const supabaseUrl = import.meta.env.VITE_SUPABASE_URL;
const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY;
const supabase = createClient(supabaseUrl, supabaseAnonKey);

const PaymentPage = () => {
  const { orderId } = useParams();
  const navigate = useNavigate();
  const location = useLocation();
  const [currentUser, setCurrentUser] = useState(null);
  const [order, setOrder] = useState(null);
  const [orderItems, setOrderItems] = useState([]);
  const [loading, setLoading] = useState(true);
  const [paymentMethod, setPaymentMethod] = useState('btc');
  const [isProcessing, setIsProcessing] = useState(false);
  const [paymentTransaction, setPaymentTransaction] = useState(null);
  const [paymentAddresses, setPaymentAddresses] = useState({});
  const [availablePaymentMethods, setAvailablePaymentMethods] = useState([]);
  const [returnToOrdersList, setReturnToOrdersList] = useState(false);

  // –ê–Ω–∏–º–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  const pageVariants = {
    initial: { opacity: 0 },
    animate: { 
      opacity: 1,
      transition: { duration: 0.3, ease: 'easeInOut' }
    },
    exit: { 
      opacity: 0,
      transition: { duration: 0.2, ease: 'easeInOut' }
    }
  };

  // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∫–æ–Ω–æ–∫ –º–µ—Ç–æ–¥–æ–≤ –æ–ø–ª–∞—Ç—ã
  const getPaymentIcon = (type) => {
    switch (type) {
      case 'btc': return { icon: '‚Çø', color: 'text-orange-500' };
      case 'eth': return { icon: 'Œû', color: 'text-blue-500' };
      case 'usdt_trc20': return { icon: '‚ÇÆ', color: 'text-green-500' };
      case 'usdt_erc20': return { icon: '‚ÇÆ', color: 'text-green-600' };
      case 'manual': return { icon: 'üí≥', color: 'text-gray-500' };
      default: return { icon: '$', color: 'text-primary' };
    }
  };

  // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–π –º–µ—Ç–æ–¥–æ–≤ –æ–ø–ª–∞—Ç—ã
  const getPaymentName = (type) => {
    switch (type) {
      case 'btc': return 'Bitcoin (BTC)';
      case 'eth': return 'Ethereum (ETH)';
      case 'usdt_trc20': return 'USDT (TRC-20)';
      case 'usdt_erc20': return 'USDT (ERC-20)';
      case 'manual': return '–†—É—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞';
      default: return type;
    }
  };

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
  useEffect(() => {
    const initialize = async () => {
      console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PaymentPage –¥–ª—è –∑–∞–∫–∞–∑–∞:', orderId);
      
      try {
        const { data: { user } } = await supabase.auth.getUser();
        
        if (!user) {
          console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å');
          navigate('/profile');
          return;
        }

        console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω:', user.id);
        setCurrentUser(user);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        setReturnToOrdersList(location.state?.fromOrdersList || false);
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–¥—Ä–µ—Å–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã
        await loadPaymentAddresses();
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–∫–∞–∑ –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        await loadOrder(user.id);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
        showNotification('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ–ø–ª–∞—Ç—ã');
        navigate('/profile?tab=orders');
      } finally {
        setLoading(false);
      }
    };

    if (orderId) {
      initialize();
    } else {
      console.error('ID –∑–∞–∫–∞–∑–∞ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω');
      navigate('/profile?tab=orders');
      setLoading(false);
    }
  }, [orderId, navigate, location.state]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è –æ–ø–ª–∞—Ç—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  const loadPaymentAddresses = async () => {
    try {
      const { data, error } = await supabase
        .from('payment_addresses')
        .select('*')
        .eq('is_active', true);
      
      if (error) throw error;
      
      // –û–±–æ–≥–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–¥—Ä–µ—Å–æ–≤ –∏ —Å–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
      const addressesByType = {};
      const methods = [];
      
      data.forEach(addr => {
        addressesByType[addr.type] = addr;
        
        // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î
        const iconData = getPaymentIcon(addr.type);
        methods.push({
          id: addr.type,
          name: addr.name || getPaymentName(addr.type),
          description: addr.description,
          icon: iconData.icon,
          color: iconData.color,
          address: addr.address,
          network: addr.network,
          confirmations: addr.confirmations,
          exchangeRate: addr.exchange_rate || 1.0
        });
      });
      
      setPaymentAddresses(addressesByType);
      setAvailablePaymentMethods(methods);
      
      // –ï—Å–ª–∏ –Ω–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã, –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π
      if (methods.length > 0 && !paymentMethod) {
        setPaymentMethod(methods[0].id);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è –æ–ø–ª–∞—Ç—ã:', error);
      showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ–ø–ª–∞—Ç—ã');
    }
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–∫–∞–∑–∞
  const loadOrder = async (userId) => {
    console.log('–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–∫–∞–∑–∞:', orderId, '–¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);
    
    try {
      const { data: orderData, error: orderError } = await supabase
        .from('orders')
        .select('*')
        .eq('id', orderId)
        .eq('user_id', userId)
        .single();

      if (orderError) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–∞:', orderError);
        throw orderError;
      }
      
      console.log('–ó–∞–≥—Ä—É–∂–µ–Ω –∑–∞–∫–∞–∑:', orderData);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫–∞–∑ –æ–¥–æ–±—Ä–µ–Ω
      if (orderData.status !== 'approved') {
        console.log('–ó–∞–∫–∞–∑ –Ω–µ –æ–¥–æ–±—Ä–µ–Ω –¥–ª—è –æ–ø–ª–∞—Ç—ã, —Å—Ç–∞—Ç—É—Å:', orderData.status);
        showNotification(`–ó–∞–∫–∞–∑ –Ω–µ –≥–æ—Ç–æ–≤ –∫ –æ–ø–ª–∞—Ç–µ. –°—Ç–∞—Ç—É—Å: ${orderData.status}`);
        navigate('/profile?tab=orders');
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—É–º–º—ã
      if (!orderData.total_amount || orderData.total_amount <= 0) {
        console.log('–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞:', orderData.total_amount);
        showNotification('–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É.');
        navigate('/profile?tab=orders');
        return;
      }

      setOrder(orderData);

      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∑–∞–∫–∞–∑–∞
      const { data: itemsData, error: itemsError } = await supabase
        .from('order_items')
        .select('*')
        .eq('order_id', orderId);

      if (itemsError) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –∑–∞–∫–∞–∑–∞:', itemsError);
        throw itemsError;
      }
      
      console.log('–ó–∞–≥—Ä—É–∂–µ–Ω—ã —Ç–æ–≤–∞—Ä—ã –∑–∞–∫–∞–∑–∞:', itemsData);
      setOrderItems(itemsData || []);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ–ø–ª–∞—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞
      const { data: existingTransaction, error: transactionError } = await supabase
        .from('payment_transactions')
        .select('*')
        .eq('order_id', orderId)
        .or('status.eq.pending,status.eq.waiting_confirmation,status.eq.manual_verification')
        .order('created_at', { ascending: false })
        .limit(1);

      if (!transactionError && existingTransaction && existingTransaction.length > 0) {
        console.log('–ù–∞–π–¥–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è:', existingTransaction[0]);
        setPaymentTransaction(existingTransaction[0]);
        setPaymentMethod(existingTransaction[0].payment_type);
      }

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–∞:', error);
      showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ');
      navigate('/profile?tab=orders');
    }
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã
  const getPaymentAddressForType = (type) => {
    return paymentAddresses[type] || null;
  };

  // –ü–æ–ª—É—á–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã
  const getSelectedMethod = () => {
    const methodFromAddresses = availablePaymentMethods.find(m => m.id === paymentMethod);
    if (methodFromAddresses) return methodFromAddresses;
    
    // –ï—Å–ª–∏ –º–µ—Ç–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
    const iconData = getPaymentIcon(paymentMethod);
    return {
      id: paymentMethod,
      name: getPaymentName(paymentMethod),
      icon: iconData.icon,
      color: iconData.color
    };
  };

  // –ù–∞–π—Ç–∏ –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã –ø–æ ID
  const selectedMethod = getSelectedMethod();
  
  // –ü–æ–ª—É—á–∏—Ç—å –∞–¥—Ä–µ—Å –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞
  const selectedAddress = getPaymentAddressForType(paymentMethod);

  // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É–º–º—É –≤ –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É
  const convertAmountToCrypto = (amount, exchangeRate = 1.0) => {
    if (!amount || !exchangeRate || exchangeRate === 0) return 0;
    return parseFloat(amount) * parseFloat(exchangeRate);
  };

  // –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –æ–ø–ª–∞—Ç—ã
  const handleCreatePayment = async () => {
    if (!order) {
      console.error('–ó–∞–∫–∞–∑ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
      return;
    }

    console.log('–°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –æ–ø–ª–∞—Ç—ã –¥–ª—è –∑–∞–∫–∞–∑–∞:', order.id, '–º–µ—Ç–æ–¥–æ–º:', paymentMethod);
    setIsProcessing(true);

    try {
      const paymentAddress = getPaymentAddressForType(paymentMethod);
      
      if (!paymentAddress) {
        throw new Error(`–ê–¥—Ä–µ—Å –¥–ª—è –æ–ø–ª–∞—Ç—ã —Ç–∏–ø–∞ ${paymentMethod} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      }
      
      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º—É –≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫—É—Ä—Å–∞ –æ–±–º–µ–Ω–∞
      const cryptoAmount = paymentMethod !== 'manual' 
        ? convertAmountToCrypto(order.total_amount, paymentAddress.exchange_rate)
        : order.total_amount;

      // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –æ–ø–ª–∞—Ç—ã
      const transactionData = {
        order_id: order.id,
        payment_type: paymentMethod,
        amount: paymentMethod === 'manual' ? order.total_amount : cryptoAmount,
        currency: paymentMethod === 'manual' ? order.currency : paymentMethod.toUpperCase(),
        status: paymentMethod === 'manual' ? 'manual_verification' : 'waiting_confirmation',
        crypto_address: paymentAddress.address,
        network: paymentAddress.network,
        required_confirmations: paymentAddress.confirmations,
        expires_at: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString() // 24 —á–∞—Å–∞
      };

      console.log('–î–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', transactionData);

      const { data: transaction, error } = await supabase
        .from('payment_transactions')
        .insert([transactionData])
        .select()
        .single();

      if (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', error);
        throw error;
      }

      console.log('–°–æ–∑–¥–∞–Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è:', transaction);
      setPaymentTransaction(transaction);

      showNotification(
        '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ–ø–ª–∞—Ç—ã —Å–æ–∑–¥–∞–Ω–∞. –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å –∏ –Ω–∞–∂–º–∏—Ç–µ "–Ø –æ–ø–ª–∞—Ç–∏–ª –∑–∞–∫–∞–∑".',
        '–û–ø–ª–∞—Ç–∞ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–∞'
      );

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', error);
      showNotification('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –æ–ø–ª–∞—Ç—ã');
    } finally {
      setIsProcessing(false);
    }
  };

  // –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
  const copyToClipboard = (text) => {
    if (navigator.clipboard) {
      navigator.clipboard.writeText(text).then(() => {
        showNotification('–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞');
      }).catch(err => {
        console.error('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:', err);
        showNotification('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è');
      });
    } else {
      // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
      const textArea = document.createElement('textarea');
      textArea.value = text;
      document.body.appendChild(textArea);
      textArea.select();
      try {
        document.execCommand('copy');
        showNotification('–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞');
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:', err);
        showNotification('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è');
      }
      document.body.removeChild(textArea);
    }
  };

  // –û—Ç–º–µ—Ç–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—É—é (–æ–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è)
  const markTransactionAsPaid = async () => {
    if (!paymentTransaction) return;
    
    try {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–∞ "—Ä—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞"
      const { error } = await supabase
        .from('payment_transactions')
        .update({
          status: 'manual_verification',
          updated_at: new Date().toISOString()
        })
        .eq('id', paymentTransaction.id);

      if (error) throw error;
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      setPaymentTransaction(prev => ({
        ...prev,
        status: 'manual_verification',
        updated_at: new Date().toISOString()
      }));

      showNotification(
        '–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –æ–ø–ª–∞—Ç–∞ –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.',
        '–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è'
      );
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', error);
      showNotification('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã');
    }
  };

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
  const formatCryptoAddress = (address) => {
    if (!address) return '';
    
    const isMobile = window.innerWidth < 640;
    if (isMobile && address.length > 24 && !address.startsWith('–ü–æ –∑–∞–ø—Ä–æ—Å—É')) {
      return `${address.substring(0, 12)}...${address.substring(address.length - 8)}`;
    }
    
    return address;
  };

  // –°–±—Ä–æ—Å–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
  const resetPaymentTransaction = () => {
    showConfirmation(
      '–í—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –∏ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã?',
      '–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã',
      async (buttonId) => {
        if (buttonId === 'ok') {
          setPaymentTransaction(null);
        }
      }
    );
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—É–º–º—ã –≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ —Å —É—á–µ—Ç–æ–º –∫—É—Ä—Å–∞ –æ–±–º–µ–Ω–∞
  const getCryptoAmount = () => {
    if (!order || !selectedAddress || !selectedAddress.exchange_rate) return '–ù/–î';
    
    const exchangeRate = parseFloat(selectedAddress.exchange_rate);
    if (isNaN(exchangeRate) || exchangeRate === 0) return '–ù/–î';
    
    const rubAmount = parseFloat(order.total_amount);
    if (isNaN(rubAmount)) return '–ù/–î';
    
    const cryptoAmount = rubAmount * exchangeRate;
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —É—á–µ—Ç–æ–º –≤–∞–ª—é—Ç—ã
    switch (paymentMethod) {
      case 'btc': 
        return cryptoAmount.toFixed(8);
      case 'eth': 
        return cryptoAmount.toFixed(6);
      case 'usdt_trc20': 
      case 'usdt_erc20': 
        return cryptoAmount.toFixed(2);
      default: 
        return cryptoAmount.toFixed(2);
    }
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫—É—Ä—Å–µ –æ–±–º–µ–Ω–∞
  const getExchangeRateInfo = () => {
    if (!selectedAddress || !selectedAddress.exchange_rate) return '';
    
    const exchangeRate = parseFloat(selectedAddress.exchange_rate);
    if (isNaN(exchangeRate) || exchangeRate === 0) return '';
    
    // –†–∞—Å—á–µ—Ç –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –∫—É—Ä—Å–∞ (—Å–∫–æ–ª—å–∫–æ —Ä—É–±–ª–µ–π –≤ 1 –µ–¥–∏–Ω–∏—Ü–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã)
    const rubPerCrypto = 1 / exchangeRate;
    
    switch (paymentMethod) {
      case 'btc': 
        return `1 BTC = ${rubPerCrypto.toLocaleString('ru-RU')} ‚ÇΩ`;
      case 'eth': 
        return `1 ETH = ${rubPerCrypto.toLocaleString('ru-RU')} ‚ÇΩ`;
      case 'usdt_trc20': 
      case 'usdt_erc20': 
        return `1 USDT = ${rubPerCrypto.toLocaleString('ru-RU')} ‚ÇΩ`;
      default: 
        return '';
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –∑–∞–∫–∞–∑–æ–≤ –∏–ª–∏ –≤—ã–±–æ—Ä—É —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
  const handleGoBack = () => {
    if (paymentTransaction) {
      // –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
      resetPaymentTransaction();
    } else {
      // –ò–Ω–∞—á–µ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∑–∞–∫–∞–∑–æ–≤
      navigate('/profile?tab=orders');
    }
  };

  if (loading) {
    return (
      <Section variant="default" className="py-8">
        <div className="text-center">
          <div className="animate-pulse">
            <div className="w-16 h-16 bg-gray-200 rounded-full mx-auto mb-4"></div>
            <div className="h-6 bg-gray-200 rounded w-32 mx-auto mb-2"></div>
            <div className="h-4 bg-gray-200 rounded w-48 mx-auto"></div>
          </div>
        </div>
      </Section>
    );
  }

  if (!order) {
    return (
      <Section variant="default" className="py-8">
        <div className="text-center">
          <h1 className="text-2xl font-bold mb-4">–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω</h1>
          <p className="text-text-secondary mb-4">
            –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –æ–ø–ª–∞—Ç—ã
          </p>
          <Button variant="primary" to="/profile?tab=orders">
            –ö –∑–∞–∫–∞–∑–∞–º
          </Button>
        </div>
      </Section>
    );
  }

  return (
    <motion.div
      variants={pageVariants}
      initial="initial"
      animate="animate"
      exit="exit"
      className="fade-in"
    >
      {/* Header */}
      <div className="relative bg-gradient-to-r from-primary to-primary-dark py-6">
        <div className="container mx-auto px-4">
          <Button
            variant="text"
            onClick={handleGoBack}
            icon={<FiArrowLeft size={16} />}
            className="text-white hover:text-white/80 mb-4"
          >
            {paymentTransaction ? '–°–º–µ–Ω–∏—Ç—å —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã' : '–ö –∑–∞–∫–∞–∑–∞–º'}
          </Button>
          
          <h1 className="text-2xl font-bold text-white mb-2">–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞</h1>
          <p className="text-white/90 text-sm">
            –ó–∞–∫–∞–∑ {order.order_number} ‚Ä¢ {parseFloat(order.total_amount).toLocaleString('ru-RU')} ‚ÇΩ
          </p>
        </div>
      </div>

      <Section variant="default" className="py-6">
        <div className="max-w-md mx-auto space-y-6">
          {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ */}
          <div className="bg-white p-6 rounded-lg shadow-card">
            <h3 className="text-lg font-semibold mb-4">–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞</h3>
            
            <div className="space-y-3 mb-4">
              <div className="flex justify-between">
                <span className="text-text-secondary">–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:</span>
                <span className="font-medium">{order.order_number}</span>
              </div>
              <div className="flex justify-between">
                <span className="text-text-secondary">–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:</span>
                <span className="font-medium">
                  {new Date(order.created_at).toLocaleDateString('ru-RU')}
                </span>
              </div>
              <div className="flex justify-between">
                <span className="text-text-secondary">–°—Ç–∞—Ç—É—Å:</span>
                <span className="font-medium text-green-600">–û–¥–æ–±—Ä–µ–Ω</span>
              </div>
            </div>

            {/* –¢–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑–µ */}
            <div className="border-t border-divider pt-4">
              <h4 className="font-medium mb-3">–¢–æ–≤–∞—Ä—ã:</h4>
              <div className="max-h-48 overflow-y-auto">
                {orderItems.map((item) => (
                  <div key={item.id} className="flex justify-between items-center py-2">
                    <div className="pr-2 min-w-0">
                      <div className="font-medium text-sm truncate" title={item.product_name}>
                        {item.product_name}
                      </div>
                      <div className="text-xs text-text-secondary">
                        {item.product_sku} √ó {item.quantity}
                      </div>
                    </div>
                    <div className="text-sm font-medium whitespace-nowrap">
                      {item.unit_price ? `${parseFloat(item.unit_price).toLocaleString('ru-RU')} ‚ÇΩ √ó ${item.quantity}` : '–ü–æ –∑–∞–ø—Ä–æ—Å—É'}
                    </div>
                  </div>
                ))}
              </div>
            </div>

            {/* –î–æ—Å—Ç–∞–≤–∫–∞, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å */}
            {order.delivery_cost > 0 && (
              <div className="border-t border-divider pt-4 mt-4">
                <div className="flex justify-between items-center">
                  <span className="text-text-secondary">–î–æ—Å—Ç–∞–≤–∫–∞:</span>
                  <span className="text-sm">
                    {parseFloat(order.delivery_cost).toLocaleString('ru-RU')} ‚ÇΩ
                  </span>
                </div>
              </div>
            )}

            <div className="border-t border-divider pt-4 mt-4">
              <div className="flex justify-between items-center">
                <span className="text-lg font-semibold">–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ:</span>
                <span className="text-xl font-bold text-primary">
                  {parseFloat(order.total_amount).toLocaleString('ru-RU')} ‚ÇΩ
                </span>
              </div>
            </div>
          </div>

          {/* –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ–ø–ª–∞—Ç—ã */}
          {paymentTransaction ? (
            <div className="bg-white p-6 rounded-lg shadow-card">
              <h3 className="text-lg font-semibold mb-4">–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –æ–ø–ª–∞—Ç–µ</h3>
              
              <div className="space-y-4">
                {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ—Ç–æ–¥–µ –æ–ø–ª–∞—Ç—ã */}
                <div className="flex items-center gap-3 p-3 bg-green-50 border border-green-200 rounded-lg">
                  <span className={`text-xl ${selectedMethod?.color}`}>
                    {selectedMethod?.icon}
                  </span>
                  <div>
                    <div className="font-medium text-green-800">{selectedMethod?.name}</div>
                    {selectedAddress && (
                      <div className="text-sm text-green-600">
                        –°–µ—Ç—å: {selectedAddress.network}
                        {selectedAddress.confirmations > 0 && ` ‚Ä¢ –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π: ${selectedAddress.confirmations}`}
                      </div>
                    )}
                  </div>
                </div>

                {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—É—Ä—Å–µ –æ–±–º–µ–Ω–∞ */}
                {paymentMethod !== 'manual' && selectedAddress && (
                  <div className="bg-blue-50 border border-blue-200 rounded-lg p-3">
                    <div className="font-medium text-blue-800 mb-1">–ö—É—Ä—Å –æ–±–º–µ–Ω–∞</div>
                    <div className="flex justify-between items-center text-sm text-blue-700">
                      <span>
                        {getExchangeRateInfo()}
                      </span>
                      <span className="font-medium">
                        {order.total_amount ? `${parseFloat(order.total_amount).toLocaleString('ru-RU')} ‚ÇΩ = ${getCryptoAmount()} ${paymentMethod.toUpperCase().replace('_TRC20', '').replace('_ERC20', '')}` : ''}
                      </span>
                    </div>
                  </div>
                )}

                {/* –ê–¥—Ä–µ—Å –¥–ª—è –æ–ø–ª–∞—Ç—ã */}
                {paymentTransaction.crypto_address && paymentMethod !== 'manual' && (
                  <div>
                    <label className="block text-sm font-medium text-text-secondary mb-2">
                      –ê–¥—Ä–µ—Å –¥–ª—è –æ–ø–ª–∞—Ç—ã:
                    </label>
                    <div className="flex items-center gap-2 bg-gray-50 rounded-md p-3 border border-divider overflow-hidden">
                      <div className="flex-1 font-mono text-sm break-all text-text overflow-x-auto whitespace-nowrap">
                        {paymentTransaction.crypto_address}
                      </div>
                      <Button
                        variant="outlined"
                        size="sm"
                        className="flex-shrink-0"
                        onClick={() => copyToClipboard(paymentTransaction.crypto_address)}
                        icon={<FiCopy size={14} />}
                      />
                    </div>
                    
                    {/* –ù–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —Ç–∞–∫–∂–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å */}
                    <div className="mt-1 text-xs text-text-secondary sm:hidden">
                      <span className="block truncate">
                        {formatCryptoAddress(paymentTransaction.crypto_address)}
                      </span>
                    </div>
                  </div>
                )}

                {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —Ä—É—á–Ω–æ–π –æ–ø–ª–∞—Ç—ã */}
                {paymentMethod === 'manual' && (
                  <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-3">
                    <p className="text-sm text-blue-800">
                      –°–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –æ–ø–ª–∞—Ç—ã. 
                      –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É "–Ø –æ–ø–ª–∞—Ç–∏–ª –∑–∞–∫–∞–∑".
                    </p>
                  </div>
                )}

                {/* –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ */}
                <div>
                  <label className="block text-sm font-medium text-text-secondary mb-2">
                    –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ:
                  </label>
                  <div className="flex items-center gap-2">
                    <code className="flex-1 p-3 bg-gray-50 rounded-md text-sm font-bold border border-divider">
                      {paymentMethod === 'manual' ? 
                        `${parseFloat(paymentTransaction.amount).toLocaleString('ru-RU')} ${paymentTransaction.currency}` : 
                        `${parseFloat(paymentTransaction.amount).toFixed(
                          paymentMethod === 'btc' ? 8 : 
                          paymentMethod === 'eth' ? 6 : 2
                        )} ${paymentTransaction.currency}`
                      }
                    </code>
                    <Button
                      variant="outlined"
                      size="sm"
                      onClick={() => copyToClipboard(`${paymentTransaction.amount} ${paymentTransaction.currency}`)}
                      icon={<FiCopy size={14} />}
                    />
                  </div>
                  
                  {/* –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤ —Ä—É–±–ª—è—Ö –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç */}
                  {paymentMethod !== 'manual' && (
                    <div className="mt-1 text-xs text-text-secondary">
                      –°—É–º–º–∞ –≤ —Ä—É–±–ª—è—Ö: {parseFloat(order.total_amount).toLocaleString('ru-RU')} ‚ÇΩ
                    </div>
                  )}
                </div>

                {/* –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ */}
                <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
                  <div className="flex items-start">
                    <FiAlertCircle className="text-yellow-600 mt-0.5 mr-3 flex-shrink-0" size={16} />
                    <div className="text-sm">
                      <p className="font-medium text-yellow-800 mb-1">–í–∞–∂–Ω–æ:</p>
                      <ul className="text-yellow-700 space-y-1 text-xs">
                        <li>‚Ä¢ –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω—É—é —Å—É–º–º—É –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å</li>
                        <li>‚Ä¢ –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–Ø –æ–ø–ª–∞—Ç–∏–ª –∑–∞–∫–∞–∑" –ø–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞</li>
                        <li>‚Ä¢ –í–∞—à –ø–ª–∞—Ç–µ–∂ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –≤—Ä—É—á–Ω—É—é</li>
                        <li>‚Ä¢ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: 24 —á–∞—Å–∞</li>
                      </ul>
                    </div>
                  </div>
                </div>

                {/* –°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã */}
                <div className="p-4 border border-divider rounded-lg">
                  <div className="flex justify-between items-center mb-2">
                    <span className="font-medium">–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã:</span>
                    <span className={`text-sm font-medium px-2 py-1 rounded-full ${
                      paymentTransaction.status === 'manual_verification' 
                        ? 'bg-blue-100 text-blue-800' 
                        : 'bg-yellow-100 text-yellow-800'
                    }`}>
                      {paymentTransaction.status === 'manual_verification' 
                        ? '–û–∂–∏–¥–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞' 
                        : '–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã'}
                    </span>
                  </div>
                  
                  <p className="text-sm text-text-secondary mb-4">
                    {paymentTransaction.status === 'manual_verification' 
                      ? '–°–ø–∞—Å–∏–±–æ! –í–∞—à –ø–ª–∞—Ç–µ–∂ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.' 
                      : '–ü–æ—Å–ª–µ —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É "–Ø –æ–ø–ª–∞—Ç–∏–ª –∑–∞–∫–∞–∑".'}
                  </p>
                  
                  <div className="flex flex-col sm:flex-row gap-3">
                    {paymentTransaction.status !== 'manual_verification' && (
                      <Button
                        variant="primary"
                        fullWidth
                        onClick={markTransactionAsPaid}
                        icon={<FiCheck size={16} />}
                      >
                        –Ø –æ–ø–ª–∞—Ç–∏–ª –∑–∞–∫–∞–∑
                      </Button>
                    )}
                    
                    {/* –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã */}
                    <Button
                      variant="outlined"
                      fullWidth
                      onClick={resetPaymentTransaction}
                      icon={<FiX size={16} />}
                    >
                      –°–º–µ–Ω–∏—Ç—å —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã
                    </Button>
                  </div>
                </div>
              </div>
            </div>
          ) : (
            <>
              {/* –í—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã */}
              <div className="bg-white p-6 rounded-lg shadow-card">
                <h3 className="text-lg font-semibold mb-4">–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã</h3>
                
                <div className="space-y-3">
                  {availablePaymentMethods.map((method) => {
                    // –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å –æ–±–º–µ–Ω–∞
                    const exchangeRate = paymentAddresses[method.id]?.exchange_rate || 1.0;
                    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä–Ω—É—é —Å—É–º–º—É –≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ
                    const cryptoAmount = method.id !== 'manual' && order.total_amount
                      ? convertAmountToCrypto(order.total_amount, exchangeRate).toFixed(
                          method.id === 'btc' ? 8 : 
                          method.id === 'eth' ? 6 : 2
                        )
                      : null;
                    
                    return (
                      <label
                        key={method.id}
                        className={`flex items-center p-3 border rounded-lg cursor-pointer transition-colors ${
                          paymentMethod === method.id
                            ? 'border-primary bg-primary-bg'
                            : 'border-divider hover:border-primary/50'
                        }`}
                      >
                        <input
                          type="radio"
                          name="paymentMethod"
                          value={method.id}
                          checked={paymentMethod === method.id}
                          onChange={(e) => setPaymentMethod(e.target.value)}
                          className="sr-only"
                        />
                        <span className={`text-xl mr-3 ${method.color}`}>
                          {method.icon}
                        </span>
                        <div className="flex-1 min-w-0">
                          <div className="font-medium truncate">
                            {method.name}
                          </div>
                          {method.id !== 'manual' && cryptoAmount && (
                            <div className="text-xs text-text-secondary truncate">
                              ‚âà {cryptoAmount} {method.id.toUpperCase().replace('_TRC20', '').replace('_ERC20', '')}
                            </div>
                          )}
                          {method.description && (
                            <div className="text-xs text-text-secondary truncate" title={`${method.network} ‚Ä¢ ${method.confirmations} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π ‚Ä¢ ${method.description}`}>
                              {method.network} ‚Ä¢ {method.confirmations} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π
                              {method.description && ` ‚Ä¢ ${method.description}`}
                            </div>
                          )}
                        </div>
                        {paymentMethod === method.id && (
                          <FiCheck className="ml-auto text-primary" size={16} />
                        )}
                      </label>
                    );
                  })}
                  
                  {availablePaymentMethods.length === 0 && (
                    <div className="bg-red-50 border border-red-200 rounded-lg p-4 text-center">
                      <p className="text-red-800 text-sm font-medium">
                        –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ç–æ–¥–æ–≤ –æ–ø–ª–∞—Ç—ã
                      </p>
                      <p className="text-red-600 text-xs mt-1">
                        –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ
                      </p>
                      <Button 
                        variant="outlined" 
                        className="mt-2 text-red-600 border-red-200 hover:bg-red-50"
                        size="sm"
                        onClick={() => loadPaymentAddresses()}
                      >
                        –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É
                      </Button>
                    </div>
                  )}
                </div>
              </div>

              {/* –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –≤—Ä–µ–º–µ–Ω–∏ */}
              <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
                <div className="flex items-start">
                  <FiClock className="text-yellow-600 mt-0.5 mr-3 flex-shrink-0" size={16} />
                  <div className="text-sm">
                    <p className="font-medium text-yellow-800 mb-1">–°—Ä–æ–∫ –æ–ø–ª–∞—Ç—ã:</p>
                    <p className="text-yellow-700">
                      –£ –≤–∞—Å –µ—Å—Ç—å 24 —á–∞—Å–∞ —Å –º–æ–º–µ–Ω—Ç–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã.
                      –ü–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞ –∑–∞–∫–∞–∑ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–º–µ–Ω–µ–Ω.
                    </p>
                  </div>
                </div>
              </div>

              {/* –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø–ª–∞—Ç–µ–∂–µ–π */}
              <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
                <div className="flex items-start">
                  <FiShield className="text-blue-600 mt-0.5 mr-3 flex-shrink-0" size={16} />
                  <div className="text-sm">
                    <p className="font-medium text-blue-800 mb-1">–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø–ª–∞—Ç–µ–∂–µ–π:</p>
                    <ul className="text-blue-700 space-y-1 text-xs">
                      <li>‚Ä¢ –í—Å–µ –ø–ª–∞—Ç–µ–∂–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤ –∑–∞—â–∏—â–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ</li>
                      <li>‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö —à–∏—Ñ—Ä—É–µ—Ç—Å—è</li>
                      <li>‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤—Ä—É—á–Ω—É—é</li>
                    </ul>
                  </div>
                </div>
              </div>

              {/* –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ */}
              <Button
                variant="primary"
                fullWidth
                onClick={handleCreatePayment}
                disabled={isProcessing || !getPaymentAddressForType(paymentMethod) || availablePaymentMethods.length === 0}
                icon={isProcessing ? undefined : <FiCreditCard size={16} />}
              >
                {isProcessing ? '–°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...' : '–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ'}
              </Button>
            </>
          )}
        </div>
      </Section>
    </motion.div>
  );
};

export default PaymentPage;